name: Build and Push User Service to Docker Hub

# Trigger the workflow only when:
# - a push is made to the 'main' or 'dev' branches
# - and the changes affect files under packages/user-service/ or its Dockerfile
on:
  push:
    branches: ["main", "dev"]
    paths:
      - "packages/user-service/**"
      - "packages/user-service/Dockerfile"

# Define reusable environment variables
env:
  DOCKER_HUB_REPO: rssutardev/paperdex

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub using secrets for security
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Step 3: Set up Docker Buildx (enables advanced Docker build capabilities like caching, multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3.5: Set image tag dynamically based on branch name
      - name: Set image tag based on branch
        id: set-tag
        run: |
          TAG="user-service-${GITHUB_REF_NAME}-latest"
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      # Step 4: Build the Docker image and push it to Docker Hub
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: . # Build context (project root)
          file: packages/user-service/Dockerfile # Dockerfile path
          push: true # Push the built image
          tags: ${{ env.DOCKER_HUB_REPO }}:${{ steps.set-tag.outputs.TAG }} # Image tag
          cache-from: type=gha # Use GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max # Save cache for future runs

      # Step 5: Pull and run the image to verify that it works correctly
      - name: Verify
        run: |
          docker pull ${{ env.DOCKER_HUB_REPO }}:${{ steps.set-tag.outputs.TAG }}
          docker run --rm ${{ env.DOCKER_HUB_REPO }}:${{ steps.set-tag.outputs.TAG }} node --version
